version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
    ports:
      - "5000:5432"   # host:container
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6000:6379"   # host:container
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.11-management
    environment:
      RABBITMQ_DEFAULT_USER: app
      RABBITMQ_DEFAULT_PASS: app
    ports:
      - "5100:5672"    # host:container
      - "15000:15672"  # management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build: ./services/api-gateway
    ports:
      - "8000:8000"
    environment:
      - USER_SERVICE_URL=http://user-service:8031
      - PRODUCT_SERVICE_URL=http://product-service:8032
      - ORDER_SERVICE_URL=http://order-service:8033
    depends_on:
      - user-service
      - product-service
      - order-service
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build: ./services/user-service
    ports:
      - "8031:8031"  # container:container (for FastAPI)
    environment:
      - DATABASE_URL=postgresql://app:app@postgres:5432/appdb
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=mydevsecret123
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8031/health').read()"]
      interval: 10s
      timeout: 5s
      retries: 3

  product-service:
    build: ./services/product-service
    ports:
      - "8032:8032"
    environment:
      - DATABASE_URL=postgresql://app:app@postgres:5432/appdb
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://app:app@rabbitmq:5672/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8032/health').read()"]
      interval: 10s
      timeout: 5s
      retries: 3

  order-service:
    build: ./services/order-service
    ports:
      - "8033:8033"
    environment:
      - DATABASE_URL=postgresql://app:app@postgres:5432/appdb
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://app:app@rabbitmq:5672/
      - USER_SERVICE_URL=http://user-service:8031
      - PRODUCT_SERVICE_URL=http://product-service:8032
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8033/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data: